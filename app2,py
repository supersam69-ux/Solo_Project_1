import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import os

# Function to load data from CSV file
def load_data(file_path):
    return pd.read_csv(file_path)

# Function to train the model and provide recommendations
def train_and_recommend(stock_data):
    # Calculate the daily percentage change in closing price
    stock_data['Daily_Return'] = stock_data['Close'].pct_change(fill_method=None)

    # Create a 'Grow' column indicating whether the stock grew or not
    # Let's say if the daily return is positive, we consider it as the stock grew (1), otherwise not (0)
    stock_data['Grow'] = (stock_data['Daily_Return'] > 0).astype(int)

    # Drop rows with NaN values resulting from the calculation of percentage change
    stock_data.dropna(inplace=True)

    # Split the data into features (X) and target variable (y)
    X = stock_data.drop(['Date', 'Grow', 'Daily_Return'], axis=1)
    y = stock_data['Grow']

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Initialize the Random Forest Classifier
    rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

    # Train the model
    rf_classifier.fit(X_train, y_train)

    # Make predictions on the test data
    predictions = rf_classifier.predict(X_test)

    # Evaluate the accuracy of the model
    accuracy = accuracy_score(y_test, predictions)

    # Interpret accuracy and provide recommendations
    if accuracy > 0.90:
        recommendation = "Excellent to buy, go for it!"
    elif accuracy >= 0.75:
        recommendation = "Best for buy"
    elif accuracy >= 0.50:
        recommendation = "Good for buy"
    else:
        recommendation = "Risky to buy"

    # Convert accuracy to percentage format
    accuracy_percentage = accuracy * 100

    return recommendation, accuracy_percentage

# Get list of CSV files in the directory
csv_files = [file for file in os.listdir() if file.endswith('.csv')]

# Prompt user to input the stock name
stock_name = input("Enter the stock name: ")

# Check if a CSV file with the stock name exists
matching_files = [file for file in csv_files if stock_name.lower() in file.lower()]

if matching_files:
    # If multiple matching files found, prompt user to select one
    if len(matching_files) > 1:
        print("Multiple files found. Please select one:")
        for i, file in enumerate(matching_files):
            print(f"{i + 1}. {file}")
        selection = int(input("Enter the number corresponding to the file: ")) - 1
        file_name = matching_files[selection]
    else:
        file_name = matching_files[0]

    # Load data from the CSV file
    stock_data = load_data(file_name)

    # Train the model and provide recommendations
    recommendation, accuracy_percentage = train_and_recommend(stock_data)

    # Output the recommendation and accuracy
    print(f"Recommendation for {stock_name}: {recommendation}")
    print(f"Accuracy: {accuracy_percentage:.2f}%")
else:
    print("No CSV file found for the provided stock name.")
